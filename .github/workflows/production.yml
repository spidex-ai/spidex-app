name: Deploy main
run-name: ${{ github.actor }} is deploying production branch🚀
on:
  push:
    branches:
      - 'production'
jobs:
  Deploy:
    runs-on: [spidex-app-prod]
    steps:
      - name: 🛒 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.11'

      - name: 🌍 Create .env file 
        run: |
          echo "COSMOS_ENDPOINT=${{ secrets.COSMOS_ENDPOINT }}" > .env
          echo "COSMOS_KEY=${{ secrets.COSMOS_KEY }}" >> .env
          echo "NEXT_PUBLIC_PRIVY_APP_ID=${{ secrets.NEXT_PUBLIC_PRIVY_APP_ID }}" >> .env
          echo "PRIVY_APP_SECRET=${{ secrets.PRIVY_APP_SECRET }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "NEXT_PUBLIC_POSTHOG_KEY=${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}" >> .env
          echo "NEXT_PUBLIC_POSTHOG_HOST=${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}" >> .env
          echo "TAPTOOLS_API_KEY=${{ secrets.TAPTOOLS_API_KEY }}" >> .env
          echo "TAPTOOLS_API_URL=${{ secrets.TAPTOOLS_API_URL }}" >> .env
          echo "DEXHUNTER_API_URL=${{ secrets.DEXHUNTER_API_URL }}" >> .env
          echo "DEXHUNTER_API_KEY=${{ secrets.DEXHUNTER_API_KEY }}" >> .env
          echo "TOKEN_CARDANO_API_URL=${{ secrets.TOKEN_CARDANO_API_URL }}" >> .env
          echo "NEXT_PUBLIC_X_URL=${{ secrets.NEXT_PUBLIC_X_URL }}" >> .env
          echo "NEXT_PUBLIC_TELEGRAM_URL=${{ secrets.NEXT_PUBLIC_TELEGRAM_URL }}" >> .env
          echo "NEXT_PUBLIC_DISCORD_URL=${{ secrets.NEXT_PUBLIC_DISCORD_URL }}" >> .env
          echo "NEXT_PUBLIC_SPIDEX_CORE_API_URL=${{ secrets.NEXT_PUBLIC_SPIDEX_CORE_API_URL }}" >> .env
          echo "NEXT_PUBLIC_SPIDEX_CORE_API_KEY=${{ secrets.NEXT_PUBLIC_SPIDEX_CORE_API_KEY }}" >> .env
          echo "NEXT_PUBLIC_SPIDEX_APP_URL=${{ secrets.NEXT_PUBLIC_SPIDEX_APP_URL }}" >> .env
          echo "NEXT_PUBLIC_CARDANO_SCAN_URL=${{ secrets.NEXT_PUBLIC_CARDANO_SCAN_URL }}" >> .env
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> .env
          echo "TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}" >> .env
          echo "COINMARKETCAP_API_KEY=${{ secrets.COINMARKETCAP_API_KEY }}" >> .env
          echo "NEXT_PUBLIC_DISCORD_CLIENT_ID=${{ secrets.NEXT_PUBLIC_DISCORD_CLIENT_ID }}" >> .env
          echo "NEXT_PUBLIC_TELEGRAM_BOT_USERNAME=${{ secrets.NEXT_PUBLIC_TELEGRAM_BOT_USERNAME }}" >> .env
          echo "AUTH_USER=${{ secrets.AUTH_USER }}" >> .env
          echo "AUTH_PASS=${{ secrets.AUTH_PASS }}" >> .env
          echo "NEXT_PUBLIC_ENVIRONMENT=${{ secrets.NEXT_PUBLIC_ENVIRONMENT }}" >> .env
          echo "NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}" >> .env
          echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}" >> .env
          echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" >> .env
          echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}" >> .env
          echo "NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}" >> .env
          
      - name: 🐳 Build and deploy with Docker Compose
        run: |
          echo "🏗️ Building and starting services..."
          docker compose up -d --build --force-recreate

          echo "📊 Checking service status..."
          docker compose ps

      - name: 📋 Show deployment status
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "📊 Final service status:"
          docker compose ps

          echo "💾 Disk usage:"
          df -h

          echo "🐳 Docker system info:"
          docker system df
          
      - name: 🧹 Cleanup on failure
        if: failure()
        run: |
          echo "❌ Deployment failed - showing logs and cleaning up..."
          docker compose logs --tail=100
